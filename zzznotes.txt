  void controlScrollDirection() {
    _isVisible = true;
    _hideButtonController = ScrollController();
    _hideButtonController.addListener(() {
      if (_hideButtonController.position.userScrollDirection == ScrollDirection.reverse) {
        if (_isVisible == true) {
          print("**** $_isVisible up");
          setState(() {
            _isVisible = false;
          });
        }
      } else {
        if (_hideButtonController.position.userScrollDirection == ScrollDirection.forward) {
          if (_isVisible == false) {
            print("**** $_isVisible down");
            setState(() {
              _isVisible = true;
            });
          }
        }
      }
    });
  }

  //login shimmer
      return Scaffold(
      body: Center(
        child: SizedBox(
          width: 200.0,
          height: 100.0,
          child: Shimmer.fromColors(
            baseColor: Colors.red,
            highlightColor: Colors.yellow,
            child: const Text(
              'Shopri',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 40.0,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ),
    );

    //bottom_nav_bar
    Align(
                          alignment: Alignment.bottomCenter,
                          child: Stack(
                            alignment: Alignment.bottomCenter,
                            children: [
                              Container(
                                width: double.infinity,
                                height: 60,
                                color: Colors.white,
                                child: Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                                  children: const [
                                    Icon(CupertinoIcons.house_alt_fill, size: 27),
                                    Icon(CupertinoIcons.search, size: 27, color: Colors.black54),
                                    SizedBox(),
                                    Icon(CupertinoIcons.heart, size: 27, color: Colors.black54),
                                    Icon(CupertinoIcons.circle_filled, size: 27, color: Colors.black87),
                                  ],
                                ),
                              ),
                              Container(
                                height: 90,
                                alignment: Alignment.topCenter,
                                child: InkWell(
                                  highlightColor: Colors.transparent,
                                  splashColor: Colors.transparent,
                                  onTap: () => Navigator.of(context).push(HomeScreenCustomAnimatedRoute(enterWidget: const CameraScreen())),
                                  child: Container(
                                    height: 60,
                                    width: 60,
                                    decoration: BoxDecoration(color: Colors.black, shape: BoxShape.circle, border: Border.all(color: Colors.white, width: 3)),
                                    alignment: Alignment.center,
                                    child: const Icon(CupertinoIcons.add, color: Colors.white, size: 30),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),

//packages to remove:
  smartRefresher
  image_picker


    /// subscriptions must be split otherwise `HttpLink` will. swallow them
    // if (websocketEndpoint != null) {
    //   final _wsLink = WebSocketLink(websockeEndpoint);
    //   _link = Link.split((request) => request.isSubscription, _wsLink, _link);
    // }


      Future<Map<String, dynamic>> getProductById(int id, BuildContext context) async {
    final QueryOptions options = QueryOptions(document: gql(Get.find<QueryController>().getProductById(id)), variables: <String, dynamic>{});
    final QueryResult result = await _client!.query(options);
    if (result.hasException) {
      print(result.exception.toString());
    }
    Map<String, dynamic> product = result.data!['product'];
    return product;
  }

    String getProductById(int id) {
    return """
      {
        product(id: $id){
          id
          views
          name
          price
          description
          category
          image
          datePosted
          poster{
            id
            username
            phoneNumber
            profile_image
          }
        }
      }
    """;
  }


  //HomeScreenCustomAnimatedRoute

                                // SizedBox(
                              //   height: size.height * 0.07,
                              //   child: ListView.builder(
                              //     physics: const BouncingScrollPhysics(),
                              //     scrollDirection: Axis.horizontal,
                              //     itemCount: Get.find<CategoryController>().homeScreenCategories.length,
                              //     itemBuilder: (context, index) {
                              //       if (index == 0) {
                              //         return Row(
                              //           children: [
                              //             GestureDetector(
                              //               onTap: () {
                              //                 setState(() {
                              //                   if (_selectedIndex != index) {
                              //                     // Get.find<ApiController>().getProducts(true);
                              //                   }
                              //                   _selectedIndex = index;
                              //                 });
                              //                 print("Category Index: " + _selectedIndex.toString());
                              //               },
                              //               child: Container(
                              //                 margin: index == 0 ? const EdgeInsets.only(left: 20.0, right: 10.0, bottom: 10.0) : const EdgeInsets.only(right: 10.0, bottom: 10.0),
                              //                 padding: const EdgeInsets.symmetric(horizontal: 25.0),
                              //                 decoration: BoxDecoration(
                              //                   borderRadius: BorderRadius.circular(5.0),
                              //                   color: _selectedIndex == 0 ? const Color(0xff444941) : const Color(0xfff2f2f2),
                              //                   border:
                              //                       _selectedIndex == 0 ? Border.all(color: Colors.grey.shade300, width: 1.0) : Border.all(color: Colors.grey.shade600, width: 1.0),
                              //                 ),
                              //                 child: Center(
                              //                   child: Text(
                              //                     'All',
                              //                     style: TextStyle(color: _selectedIndex == 0 ? Colors.white : Colors.black),
                              //                   ),
                              //                 ),
                              //               ),
                              //             ),
                              //             Container(
                              //               margin: const EdgeInsets.only(bottom: 10.0, right: 10.0),
                              //               decoration: BoxDecoration(border: Border.all(color: Colors.grey, width: 0.5)),
                              //             ),
                              //           ],
                              //         );
                              //       }
                              //       return GestureDetector(
                              //         onTap: () {
                              //           setState(() {
                              //             _selectedIndex = index;
                              //             // Get.find<ApiController>().getProductsByCategory(true, Get.find<ProductController>().homeScreenCategories[index - 1]['name']);
                              //           });
                              //           print(_selectedIndex);
                              //         },
                              //         child: Container(
                              //           margin: index == 0 ? const EdgeInsets.only(left: 20.0, right: 10.0, bottom: 10.0) : const EdgeInsets.only(right: 10.0, bottom: 10.0),
                              //           padding: const EdgeInsets.symmetric(horizontal: 15.0),
                              //           decoration: BoxDecoration(
                              //             borderRadius: BorderRadius.circular(50.0),
                              //             color: _selectedIndex == index ? const Color(0xff444941) : const Color(0xfff2f2f2),
                              //             border: _selectedIndex == index
                              //                 ? Border.all(color: const Color(0xfff8f8f8), width: 1.0)
                              //                 : Border.all(color: Colors.grey.shade300, width: 1.0),
                              //           ),
                              //           child: Row(
                              //             children: [
                              //               Icon(Get.find<CategoryController>().homeScreenCategories[index - 1]['icon'],
                              //                   color: _selectedIndex == index ? Colors.white : Colors.black),
                              //               SizedBox(width: size.width * 0.02),
                              //               Center(
                              //                   child: Text(Get.find<CategoryController>().homeScreenCategories[index - 1]['name'],
                              //                       style: TextStyle(color: _selectedIndex == index ? Colors.white : Colors.black))),
                              //             ],
                              //           ),
                              //         ),
                              //       );
                              //     },
                              //   ),
                              // ),


                                            // SizedBox(height: size.height * 0.02),
                              // Container(
                              //   margin: const EdgeInsets.symmetric(horizontal: 10.0),
                              //   padding: const EdgeInsets.symmetric(horizontal: 10.0),
                              //   decoration: BoxDecoration(
                              //     color: Colors.white,
                              //     borderRadius: BorderRadius.circular(10.0),
                              //     boxShadow: [BoxShadow(color: Colors.grey.shade300, offset: const Offset(2, 4), blurRadius: 10.0)],
                              //   ),
                              //   child: HomeScreenSearchBar(
                              //     size: size,
                              //     onProfileTap: () {},
                              //   ),
                              // ),
                              // SizedBox(height: size.height * 0.02),



                              //
                              //
                                void getProducts(int page, PagingController _pagingController) async {
    try {
      final QueryOptions options = QueryOptions(document: gql(Get.find<QueryController>().getProducts(page)), variables: <String, dynamic>{});
      final QueryResult result = await _client!.query(options);
      if (result.hasException) {
        print(result.exception.toString());
      }
      List productsFromApi = result.data!['products']['products'];
      final isLastPage = page >= result.data!['products']['pages'];
      if (isLastPage) {
        _pagingController.appendLastPage(productsFromApi);
      } else {
        final nextPageKey = page++;
        _pagingController.appendPage(productsFromApi, nextPageKey);
      }
    } catch (error) {
      _pagingController.error = error;
    }
    update();
  }